package com.teste.controller;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.teste.repositorios.RepositorioAdmin;
import com.teste.repositorios.RepositorioAluno;

import entidades.Admin;
import entidades.Aluno;


@Controller // This means that this class is a Controller
public class ControllerAdmin {
  @Autowired // This means to get the bean called userRepository    // Which is auto-generated by Spring, we will use it to handle the data
  private RepositorioAdmin RepositorioAdmin;
  @Autowired
  private RepositorioAluno RepositorioAluno;
  
  @PostMapping(path="/add") // Map ONLY POST Requests
  public @ResponseBody Admin addNewAdmin (@RequestBody Admin n) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request
	  n.genEmail();
	System.out.println(n.getEmail());
	System.out.println(n.getMatricula());
    return RepositorioAdmin.save(n);
  }
  
  @PostMapping(path="/addAluno") // Map ONLY POST Requests
  public @ResponseBody Aluno addNewAluno (@RequestBody Aluno n) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request
	  n.genEmail();
	System.out.println(n.getEmail());
	System.out.println(n.getMatricula());
    return RepositorioAluno.save(n);
  }

  @GetMapping(path="/allAdmin")
  public @ResponseBody Iterable<Admin> getAllAdmin() {
    // This returns a JSON or XML with the users
    return RepositorioAdmin.findAll();
  }
  
  @PutMapping(path="changeAdmin/{id}")
  public @ResponseBody Admin updateTemplario(@RequestBody Admin newAdmin, @PathVariable Integer id) {
	  RepositorioAdmin.findById(id).map(Admin ->{
		  Admin.setNome(newAdmin.getNome());
		  if(newAdmin.getEmail() != null ) {
			  Admin.setEmail(newAdmin.getEmail());
			  }
		 Admin.setsobrenome(newAdmin.getSobrenome());		
		  return RepositorioAdmin.save(Admin);
	  }).orElseGet(() -> {
	        newAdmin.setId(id);
	        return RepositorioAdmin.save(newAdmin);
	      });
	  
	  return RepositorioAdmin.findById(id).get();
  }
  
  @DeleteMapping(path="/admin_delete/{id}")
  public void deleteTemplario(@PathVariable Integer id) {
	  
	 RepositorioAdmin.deleteById(id);
  }
}